#ifndef DECODE_H
#define DECODE_H

/**
 * Structure representing a tone mapping between
 * frequencies and the corresponding character
 */
struct ToneMap {
  short low_freq;   // Frequency (Low)
  short high_freq;  // Frequency (High)
  char tone;        // Corresponding tone character
};

/**
 * Frequency structure representing a frequency and cosine pair
 */
struct Frequency {
  short frequency;  // Frequency value
  float cosw;       // Cosine of angular frequency
};

typedef struct Frequency Frequency_t;

/**
 * Will take the low and high frequencies and return
 * the corresponding DTMF tone symbol.
 */
char toneDetection(short low_freq, short high_freq);

/**
 * Will calculate the sum of absolute
 * sample values within the specified range.
 */
float quietDetection(float* samples, unsigned short size);

/**
 * Computes the magnitude of a signal segment
 * using a filter represented by freq
 */
float processSample(float* samples, unsigned short size, Frequency_t freq);

/**
 * Decodes the buffer and returns the corresponding DTMF tone
 */
char decode(float * buffer, unsigned short size);
 
#endif  // DECODE_H
