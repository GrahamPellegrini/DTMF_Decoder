#ifndef DTMF_H
#define DTMF_H

#include <math.h>

#define PI (3.1415927) // Defining estimate of PI
#define SINE_BIT 0 // Sine control bit
#define COSINE_BIT 1 // Cosine control bit
#define N 128 
#define QUIET_THRESHOLD 10
// Structure representing a tone mapping between frequencies and corresponding characters
struct ToneMap {
    int frequency1; // Frequency 1 (Low)
    int frequency2; // Frequency 2 (High)
    char tone; // Corresponding tone character
};

// Definition of the MyObject structure representing frequency and cosine/sine values
typedef struct {
    double frequency;  // Frequency value
    double cosw;       // Cosine of angular frequency
    double sinw;       // Sine of angular frequency
} MyObject;

// Array of ToneMap structures representing the mapping between frequencies and characters
struct ToneMap TONEMAP[] = {
    {697, 1209, '1'},
    {697, 1336, '2'},
    {697, 1477, '3'},
    {697, 1633, 'A'},
    {770, 1209, '4'},
    {770, 1336, '5'},
    {770, 1477, '6'},
    {770, 1633, 'B'},
    {852, 1209, '7'},
    {852, 1336, '8'},
    {852, 1477, '9'},
    {852, 1633, 'C'},
    {941, 1209, '*'},
    {941, 1336, '0'},
    {941, 1477, '#'},
    {941, 1633, 'D'}
};

// Function declarations
char toneDetection(int low_freq, int high_freq);
double quietDetection(double *samples, int start, int end);
void init(MyObject *self, double frequency, double sample_rate);
double processSample(double *samples, int start, int end, MyObject freq);
void detectTones(); // Need to implement this

#endif // DTMF_H