\documentclass{cce2014-design}
\svnInfo $Id$

% Document details
\title{Design Brief: Group 5}
\author{
   Matthew Mifsud,
   Luca Vella,
   Graham Pellegrini,
   Julian Falzon
   }
\date{\svnMaxToday, Document v.\svnInfoMaxRevision}

\begin{document}

\maketitle

\abstract{%
   Write an executive summary for your project. This should not overflow into
   the next page, should not contain references, and should be readable by
   a wide audience.
   }

\section{Introduction}
Dual-tone multi-frequency (DTMF) signaling is a method used in telecommunication systems to transmit digits or symbols over telephone lines.
Pairs of audio frequencies are used to represent each symbol; 
digits 0-9, letters A-D, and special characters * and \#.
The pair of frequencies are split into groups of low and high frequencies.
These signal frequency ranges are set in the audible tones of the voice frequency range.
Thereby being transmittable through electrical repeaters and amplifiers, and over radio and microwave links, eliminating such need for intermediate operators on long-distance circuits.

\begin{center}
   \begin{tabular}{ |c|c|c|c|c| }
   \hline
    FreqBand & 1209Hz & 1336Hz & 1477Hz & 1633Hz\\ 
    697Hz& 1 & 2 & 3 & A  \\  
    770Hz & 4 & 5 & 6 & B \\   
    852Hz & 7 & 8 & 9 & C \\
    941Hz & * & 0 & \# & D \\
    \hline
   \end{tabular}
\end{center}

The project assigned aims to build a DTMF decoder around an ARM Cortex‐M4 microcontroller. 
Where the base implementation should be able to take a line‐level audio input of known fixed tone duration, decode this input and display the corresponding result to the external LCD screen at real time.

The design should follow an ordered sequence of execution.
This documentation seeks to give a high-level view of the design overview. Following the sequence of execution respectively and briefing each step of the design to provide understanding on the holistic approach to the problem.
   

\section{System Design}
Make sure to mention the process that will be done on each individual sample "block",
where you talk about after what amount of time will you handle proccessing and what is the processing of a block.

ADC will collect only one sample, make sure to tell the ADC to sample after a given period using something like a interrupt from a timer.

In general the sample of a signal will be twice or more the frequeny.

Talk about how you will handle the system in real time.
Mentioning how to you have to seperate a thread to handle the saving and getting of the data from the ADC ( Analog digital converter ), and a "concurrent" thread to handle the processing of an already in store memory block.

We may include images in the system design the explain the workflow and data flow and control flow of the system.

\begin{itemize}
	\item Call interrupt every 125 microseconds, which makes ADC capture sample of input wave. Meaning we will therefore have a sample rate of 8kHz.
	\item Each sample is stored on buffer in RAM. 
\end{itemize}

Circuit Required to input inside ADC (VREF):
\begin{itemize}
	\item Audio source with Analogue Signal
    \item 100 NanoFarad Capacitor, acting as a coupling capacitor to block any DC offset in the audio signal. This allows the audio signal to pass through while blocking DC, thus preventing any DC bias voltage from affecting other circuitry.
    \item 100 Ohm Resistor, to provide a small amount of impedance matching, as well as limiting current to protect components.
    \item Two 10k Ohm Resistors, these resistors form a voltage divider used to bias the input of the ADC to a specific voltage. This biasing is necessary because audio signals are AC (swing positive and negative) whilst ADC input expects a signal in positive DC bias.
    \item 2 Diodes, oriented to conduct when the voltage exceeds the forward conduction threshhold, one for positive excursions and the other for negative excursions, relative to the bias voltage.
    \item Reference voltage (Vref) against which input signal is measured.
    \item Ground (0V), negative terminal of PSU.
\end{itemize}

\section{Snapshot of processing a frequency}
\begin{enumerate}
   \item Perform Analog-to-Digital Conversion (ADC). Samples the continuous analogue signal at regular intervals and converts these samples into a digital representation. Store samples in ram buffer.
   \item If necessary, normalize signal strength to ensure consistency?
   \item Filtering using Convolution (Noise Reduction). Applying filters that only allow frequencies within the DTMF range.
   \item Ensure that the detected signals are indeed valid DTMF tones and not accidental noises. Using timers to track duration of tones and intervals between them. Tone must exist for a minimum duration.After a tone a brief period of silence should follow.
   \item Frequency Analysis using Fourier Transform. Used to break down the signal into its constituent frequencies. (Discrete Fourier Transform or Fast Fourier Transform)
   \item Map Frequencies to Digits example, the frequency pair 697 Hz and 1209 Hz corresponds to the digit '1'. Mapping can be done using a lookup table stored in flash memory (since read-only).
   \item Output Display: Decoded Number. Decoded digit can be sent directly to display module from buffer.
\end{enumerate}

\section{Management}
Include a time plan.
Show task dependencies.
How are these going to be managed?

\section{Closure}

\bibliographystyle{ieeetr}
\bibliography{references}

\end{document}