/**********************************************************************
* $Id$      lpc_eeprom.c            2011-06-02
*//**
* @file     lpc_eeprom.c
* @brief    Contains all functions support for EEPROM firmware library on
*           LPC
* @version  1.0
* @date     02. June. 2011
* @author   NXP MCU SW Application Team
* 
* Copyright(C) 2011, NXP Semiconductor
* All rights reserved.
**********************************************************************/
#include "eeprom.h"

void EEPROM_Init(void)
{
    uint32_t val, cclk;
    LPC_EEPROM->PWRDWN = 0x0;
    /* EEPROM is automate turn on after reset */
    /* Setting clock:
     * EEPROM required a 375kHz. This clock is generated by dividing the
     * system bus clock.
     */
    cclk = CLKPWR_GetCLK(CLKPWR_CLKTYPE_CPU);
    val = (cclk/375000)-1;
    LPC_EEPROM->CLKDIV = val;

    /* Setting wait state */
    val  = ((((cclk / 1000000) * 15) / 1000) + 1);
    val |= (((((cclk / 1000000) * 55) / 1000) + 1) << 8);
    val |= (((((cclk / 1000000) * 35) / 1000) + 1) << 16);
    LPC_EEPROM->WSTATE = val;
}

/*********************************************************************//**
 * @brief       Write data to EEPROM at specific address
 * @param[in]   page_offset offset of data in page register(0 - 63)
 *              page_address page address (0-62)                    
 *              mode    Write mode, should only be the - MODE_8_BIT
 *              data    buffer that contain data that will be written to buffer
 *              count   number written data
 * @return      None
 * @note        This function actually write data into EEPROM memory and automatically
 *              write into next page if current page is overflowed
 **********************************************************************/
void eeprom_write(uint16_t page_offset, uint16_t page_address, void* data, uint32_t count)
{
    // Note this function implemntation only needs to write 8 bit mode

    // write data loop counter
    uint32_t i;
    // set data pointer to 8 bit
    uint8_t *tmp8 = (uint8_t *)data;

    //clear interrupt status
    LPC_EEPROM->INT_CLR_STATUS = ((1 << EEPROM_ENDOF_RW)|(1 << EEPROM_ENDOF_PROG));

    //set address
    LPC_EEPROM->ADDR = EEPROM_PAGE_ADRESS(page_address)|EEPROM_PAGE_OFFSET(page_offset);

    //write data
    for(i=0;i<count;i++){
        // set the command to write 8 bit
        LPC_EEPROM->CMD = EEPROM_CMD_8_BIT_WRITE;
        // write data to EEPROM
        LPC_EEPROM->WDATA = *tmp8;
        // increment data pointer
        tmp8++;
        // wait for the end of write
        while(!((LPC_EEPROM->INT_STATUS >> EEPROM_ENDOF_RW)&0x01));
        // clear interrupt status
        LPC_EEPROM->INT_CLR_STATUS = (1 << EEPROM_ENDOF_RW);
        // increment page_offset
        page_offset++;
        // check if page_offset is overflowed
        if((page_offset >= EEPROM_PAGE_SIZE) && (i < count - 1)) {
            // set page_offset to 0
            page_offset = 0;
            // increment page_address
            page_address++;
            // set address
            LPC_EEPROM->ADDR = EEPROM_PAGE_ADRESS(page_address)|EEPROM_PAGE_OFFSET(page_offset);
        }
    }

    //wait for the end of program
    while(!((LPC_EEPROM->INT_STATUS >> EEPROM_ENDOF_PROG)&0x01));
    LPC_EEPROM->INT_CLR_STATUS = (1 << EEPROM_ENDOF_PROG);


    
}

/*********************************************************************//**
 * @brief       Read data to EEPROM at specific address
 * @param[in]
 *              data    buffer that contain data that will be written to buffer
 *              mode    Read mode, should only be the -MODE_8_BIT               
 *              count   number read data (bytes)
 * @return      data    buffer that contain data that will be read to buffer
 **********************************************************************/
void eeprom_read(uint16_t page_offset, uint16_t page_address, void* data, uint32_t count)
{
    // Note this function implemntation only needs to read 8 bit mode
    uint32_t i;
    uint8_t *tmp8 = (uint8_t *)data;

    //clear interrupt status
    LPC_EEPROM->INT_CLR_STATUS = ((1 << EEPROM_ENDOF_RW)|(1 << EEPROM_ENDOF_PROG));

    //set address
    LPC_EEPROM->ADDR = EEPROM_PAGE_ADRESS(page_address)|EEPROM_PAGE_OFFSET(page_offset);

    //set read mode
    LPC_EEPROM->CMD = EEPROM_CMD_8_BIT_READ|EEPROM_CMD_RDPREFETCH;
    
    //read and store data in buffer
    for(i=0;i<count;i++){
        // set the 8 bit pointer to data buffer
        *tmp8 = (uint8_t)(LPC_EEPROM -> RDATA);
        // increment data pointer
        tmp8++;
        // increment page_offset
        page_offset +=1;

        //wait for the end of read
         while(!((LPC_EEPROM->INT_STATUS >> EEPROM_ENDOF_RW)&0x01));

         // clear interrupt status
        LPC_EEPROM->INT_CLR_STATUS = (1 << EEPROM_ENDOF_RW);

        // check if page_offset is overflowed
        if((page_offset >= EEPROM_PAGE_SIZE) && (i < count - 1)) {
            // set page_offset to 0
            page_offset = 0;
            // increment page_address
            page_address++;
            // set address
            LPC_EEPROM->ADDR = EEPROM_PAGE_ADRESS(page_address)|EEPROM_PAGE_OFFSET(page_offset);
        }
}

/*********************************************************************//**
 * @brief       Erase a page at the specific address
 * @param[in]   address EEPROM page address (0-62)
 * @return      data    buffer that contain data that will be read to buffer
 **********************************************************************/
void eeprom_erase(uint16_t page_address)
{
    uint32_t i;
    uint32_t count = EEPROM_PAGE_SIZE/4;

    // clear interrupt status
    LPC_EEPROM->INT_CLR_STATUS = ((1 << EEPROM_ENDOF_RW)|(1 << EEPROM_ENDOF_PROG));  

    // set address register to offset 0
    LPC_EEPROM->ADDR = EEPROM_PAGE_OFFSET(0);
    // set command to write 32 bit
    // Note we use 32 bit write to erase the page bec the page is 256 bit and will take less loop iteration
    LPC_EEPROM->CMD = EEPROM_CMD_32_BIT_WRITE;
    for(i=0;i<count;i++)
    {
        // write 0 to EEPROM
        LPC_EEPROM->WDATA = 0;
        // wait for the end of write
        while(!((LPC_EEPROM->INT_STATUS >> EEPROM_ENDOF_RW)&0x01));
        // clear interrupt status
        LPC_EEPROM->INT_CLR_STATUS = (1 << EEPROM_ENDOF_RW);
    }
    // wait for the end of program
    LPC_EEPROM->INT_CLR_STATUS = (0x1 << EEPROM_ENDOF_PROG);
    // set address register to page address
    LPC_EEPROM->ADDR = EEPROM_PAGE_ADRESS(page_address);
    // set command to erase program page
    LPC_EEPROM->CMD = EEPROM_CMD_ERASE_PRG_PAGE;
    // wait for the end of program
    while(!((LPC_EEPROM->INT_STATUS >> EEPROM_ENDOF_PROG)&0x01));
    LPC_EEPROM->INT_CLR_STATUS = (1 << EEPROM_ENDOF_PROG);
}

// End Of File
