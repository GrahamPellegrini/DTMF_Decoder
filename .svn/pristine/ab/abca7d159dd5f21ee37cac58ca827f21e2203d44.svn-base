{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Imports\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt # Plotting of graphs\n",
    "import numpy as np # used only for the last section\n",
    "from scipy.io import wavfile # import wav file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data and sampling rate\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_rate, samples = wavfile.read(\"data/perfect_sequence_500_ms_8000.wav\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nsamples = len(samples)\n",
    "totaltime = nsamples // sample_rate\n",
    "\n",
    "print(\"Amount of samples\", nsamples)\n",
    "print(\"Sampling Rate\", sample_rate)\n",
    "print(\"Total Time of clip\", totaltime)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Normalize Data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalize data values between [-2,2]\n",
    "samples = (samples - np.mean(samples)) / np.std(samples)\n",
    "# Get an axis of time with nsamples ticks\n",
    "time = np.linspace(0, totaltime, nsamples) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(20,5))\n",
    "plt.plot(time, samples)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Goertzel Algorithm\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Freq:\n",
    "    def __init__(self, frequency, sample_rate):\n",
    "        self.frequency = frequency\n",
    "        w = (2 * np.pi) * frequency / sample_rate\n",
    "        self.cosw = np.cos(w)\n",
    "        self.sinw = np.sin(w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def processSample(samples, start, end, freq):\n",
    "    q0, q1, q2 = 0, 0, 0\n",
    "    \n",
    "    for i in range(start,end):\n",
    "        q0 = samples[i] + ((2 * freq.cosw) * q1) - q2\n",
    "        q2 = q1\n",
    "        q1 = q0\n",
    "\n",
    "    real_part = q1 - q2 * freq.cosw\n",
    "    imag_part = q2 * freq.sinw\n",
    "    magnitude = np.sqrt(real_part**2 + imag_part**2)\n",
    "\n",
    "    return magnitude"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def quietDetection(samples, start, end):\n",
    "    amplitudesum = 0\n",
    "    for i in range(start,end):\n",
    "        amplitudesum+=np.abs(samples[i])\n",
    "    return amplitudesum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tone detection Algorithm\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "TONEMAP = dict()\n",
    "TONEMAP[697, 1209] = '1'\n",
    "TONEMAP[697, 1336] = '2'\n",
    "TONEMAP[697, 1477] = '3'\n",
    "TONEMAP[697, 1633] = 'A'\n",
    "TONEMAP[770, 1209] = '4'\n",
    "TONEMAP[770, 1336] = '5'\n",
    "TONEMAP[770, 1477] = '6'\n",
    "TONEMAP[770, 1633] = 'B'\n",
    "TONEMAP[852, 1209] = '7'\n",
    "TONEMAP[852, 1336] = '8'\n",
    "TONEMAP[852, 1477] = '9'\n",
    "TONEMAP[852, 1633] = 'C'\n",
    "TONEMAP[941, 1209] = '*'\n",
    "TONEMAP[941, 1336] = '0'\n",
    "TONEMAP[941, 1477] = '#'\n",
    "TONEMAP[941, 1633] = 'D'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def toneDetection(low_freq, high_Freq):\n",
    "    try:\n",
    "        return TONEMAP[low_freq, high_Freq]\n",
    "    except:\n",
    "        return ''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Algorithms applied on the music file\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "LOW_FREQ_CONST = [697,770,852,941]\n",
    "HIGH_FREQ_CONST = [1209,1336,1477,1633]\n",
    "\n",
    "LOW_FREQ = [Freq(freq,sample_rate) for freq in LOW_FREQ_CONST]\n",
    "HIGH_FREQ = [Freq(freq,sample_rate) for freq in HIGH_FREQ_CONST]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# For 44100 sample rate\n",
    "N = 8192\n",
    "QUIET_THRESHOLD = 40\n",
    "# For 8000 sample rate\n",
    "# N = 128 \n",
    "# QUIET_THRESHOLD = 10\n",
    "letter = ''\n",
    "\n",
    "for n in range(0, nsamples-N, N):\n",
    "    if quietDetection(samples,n, n+N) < QUIET_THRESHOLD:\n",
    "        letter = ''\n",
    "        continue\n",
    "\n",
    "    lowest, highest = 0, 0\n",
    "    lowest_freq, highest_freq = 0, 0\n",
    "\n",
    "    for freq in LOW_FREQ:\n",
    "        temp = processSample(samples,n,n+N,freq)\n",
    "        if temp > lowest:\n",
    "            lowest = temp\n",
    "            lowest_freq = freq.frequency\n",
    "\n",
    "    for freq in HIGH_FREQ:\n",
    "        temp = processSample(samples,n,n+N,freq)\n",
    "        if temp > highest:\n",
    "            highest = temp\n",
    "            highest_freq = freq.frequency\n",
    "    \n",
    "    prevletter = letter\n",
    "    letter = toneDetection(lowest_freq,highest_freq)\n",
    "    if prevletter != letter:\n",
    "        print(letter, end=\"\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
