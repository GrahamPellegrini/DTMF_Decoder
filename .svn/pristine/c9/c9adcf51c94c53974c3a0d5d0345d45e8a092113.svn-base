\documentclass{cce2014-design}
\svnInfo $Id$

% Document details
\title{Design Brief: Group 5}
\author{
   Matthew Mifsud,
   Luca Vella,
   Graham Pellegrini,
   Julian Falzon
   }
\date{\svnMaxToday, Document v.\svnInfoMaxRevision}

\begin{document}

\maketitle

\abstract{%
   Write an executive summary for your project. This should not overflow into
   the next page, should not contain references, and should be readable by
   a wide audience.
   This document presents the design of a Dual-Tone Multi-Frequency decoder using the LPC4088.
   }

\section{Introduction}
Dual-tone multi-frequency (DTMF) signaling is a method used in telecommunication systems to transmit digits or symbols over telephone lines.
Pairs of audio frequencies are used to represent each symbol; 
digits 0-9, letters A-D, and special characters * and \#.
The pair of frequencies are split into groups of low and high frequencies.
These signal frequency ranges are set in the audible tones of the voice frequency range.
Thereby being transmittable through electrical repeaters and amplifiers, and over radio and microwave links, eliminating such need for intermediate operators on long-distance circuits.

\begin{center}
   \begin{tabular}{ |c|c|c|c|c| }
   \hline
    FreqBand & 1209Hz & 1336Hz & 1477Hz & 1633Hz\\ 
    697Hz& 1 & 2 & 3 & A  \\  
    770Hz & 4 & 5 & 6 & B \\   
    852Hz & 7 & 8 & 9 & C \\
    941Hz & * & 0 & \# & D \\
    \hline
   \end{tabular}
\end{center}

The project assigned aims to build a DTMF decoder around an ARM Cortex‐M4 microcontroller. 
Where the base implementation should be able to take a line‐level audio input of known fixed tone duration, decode this input and display the corresponding result to the external LCD screen at real time.

The design should follow an ordered sequence of execution.
This documentation seeks to give a high-level view of the design overview. Following the sequence of execution respectively and briefing each step of the design to provide understanding on the holistic approach to the problem.
   

\section{System Design}
Hardware Components\\\\
The project is designed around the Embedded Artists LPC4088 microcontroller, which is serving as the core of our design. Initially for audio input, we employ a circuit designed to convert the incoming signal to the microcontroller's Analogue-to-digital converter (ADC) input range. The circuit contains the following:
\begin{itemize}
	\item An audio source with an analogue signal.
    \item 100 NanoFarad Capacitor, acting as a coupling capacitor to block any DC offset in the audio signal. This allows the audio signal to pass through while blocking DC, thus preventing any DC bias voltage from affecting other circuitry.
    \item 100 Ohm Resistor, to provide a small amount of impedance matching, as well as limiting current to protect components.
    \item Two 10k Ohm Resistors, these resistors form a voltage divider used to bias the input of the ADC to a specific voltage. This biasing is necessary because audio signals are AC (swing positive and negative) whilst ADC input expects a signal in positive DC bias.
    \item 2 Diodes, oriented to conduct when the voltage exceeds the forward conduction threshhold, one for positive excursions and the other for negative excursions, relative to the bias voltage.
    \item A connection to the reference voltage (VREF) of the board against which input signal is measured.
    \item A connection to ground (0V).
\end{itemize}
\\
Output is generated through a Hitachi HD44780-based 16x2 LCD, interfaced using the general purpose input/output (GPIO) for data signals, control signals, and power connections. Lastly, user interaction is facilitated by a switch which is used for controlling system settings and clearing the LCD as well as an LED which provides feedback about the system status. \\

Interrupt-Driven Sampling \\

The system will make use of a timer to generate interrupts at a frequency of 8kHz (every \(125~\mathrm{\mu s}\)) and each interrupt will trigger the ADC to capture a sample of the input signal. The sample rate was chosen based on the Nyquist theorem, which states that the rate should be at least twice the frequency of the signal, for accurate measurement. \\

Buffer store \\

Each captured sample is immediately stored in a circular buffer on the system's RAM which overwrites the oldest data once full capacity has been reached. \\

Functional Requirements \\
\begin{itemize}
	\item Switch mechanism: The system will contain a switch with multiple functionalities. A long press clears the LCD display, thus resetting it for a new input sequence. When toggled up, the decoded output is displayed continuously. When toggled down, each decoded output is displayed after a fixed time before advancing to the next. This allows the user to focus on each input separately.
	\item LED feedback: The system will make use of an LED (LED1) to provide immediate visual feedback of the system status. Under normal and safe operation, the LED emits green light. Upon detection of any error (such as decoding failure) the LED will emit red light.
\end{itemize}

Steps required for decoding a signal \\
\begin{enumerate}
   \item Analogue-to-digital conversion: Continuous analogue signals are sampled at 8kHz using the ADC and stored in the RAM buffer.
   \item Noise reduction using convolution filtering: In order to enhance signal a filter is applied such that only frequencies within the DTMF range are allowed.
   \item Tone validation: To ensure that the detected signals are indeed valid DTMF tones and not accidental noises, timers are employed to track duration of tones and silence intervals between them.
   \item Breaking up the frequency: In order to identify the two frequencies making up the signal, the Goertzel algorithm is used. This is because of its efficient and accurate detection of the tone pairs.
   \item Map frequencies to digits: Once a pair of frequencies has been obtained, they are matched to the corresponding result using a lookup table stored in flash memory since only reading is required. Example, the frequency pair 697 Hz and 1209 Hz corresponds to the digit '1'.
   \item Output Display: The decoded result is then sent directly to the display module from the buffer such that it is displayed to the user in real-time.
\end{enumerate}

\section{Management}
Include a time plan.
Show task dependencies.
How are these going to be managed?

\section{Closure}

\bibliographystyle{ieeetr}
\bibliography{references}


Make sure to mention the process that will be done on each individual sample "block",
where you talk about after what amount of time will you handle proccessing and what is the processing of a block.

ADC will collect only one sample, make sure to tell the ADC to sample after a given period using something like a interrupt from a timer.

In general the sample of a signal will be twice or more the frequeny.

Talk about how you will handle the system in real time.
Mentioning how to you have to seperate a thread to handle the saving and getting of the data from the ADC ( Analog digital converter ), and a "concurrent" thread to handle the processing of an already in store memory block.

We may include images in the system design the explain the workflow and data flow and control flow of the system.


\end{document}