#include "eeprom.h"

// Function to write data to the EEPROM
void writeEEPROM(unsigned int address, unsigned char data) {
    // Check if the address is within the EEPROM range
    if (address >= EEPROM_BASE && address < EEPROM_BASE + EEPROM_SIZE) {
        // Set the address register to the desired address
        *(unsigned int *)EEPROM_ADDR_REG = address;
        // Set the data register to the desired data
        *(unsigned char *)EEPROM_DATA_REG = data;
        // Set the control register to write enable
        *(unsigned char *)EEPROM_CTRL_REG = EEPROM_WRITE_ENABLE;
        // Wait for the EEPROM to finish writing
        while (*(unsigned char *)EEPROM_CTRL_REG & EEPROM_BUSY);
    } else {
        // Print an error message if the address is out of range
        printf("Error: Address out of range\n");
    }
}

// Function to read data from the EEPROM
unsigned char readEEPROM(unsigned int address) {
    // Check if the address is within the EEPROM range
    if (address >= EEPROM_BASE && address < EEPROM_BASE + EEPROM_SIZE) {
        // Set the address register to the desired address
        *(unsigned int *)EEPROM_ADDR_REG = address;
        // Set the control register to read enable
        *(unsigned char *)EEPROM_CTRL_REG = EEPROM_READ_ENABLE;
        // Wait for the EEPROM to finish reading
        while (*(unsigned char *)EEPROM_CTRL_REG & EEPROM_BUSY);
        // Return the data read from the data register
        return *(unsigned char *)EEPROM_DATA_REG;
    } else {
        // Print an error message if the address is out of range
        printf("Error: Address out of range\n");
        // Return 0 if the address is out of range
        return 0;
    }
}

// Function to erase data from the EEPROM
void eraseEEPROM(unsigned int address) {
    // Check if the address is within the EEPROM range
    if (address >= EEPROM_BASE && address < EEPROM_BASE + EEPROM_SIZE) {
        // Set the address register to the desired address
        *(unsigned int *)EEPROM_ADDR_REG = address;
        // Set the control register to erase enable
        *(unsigned char *)EEPROM_CTRL_REG = EEPROM_ERASE_ENABLE;
        // Wait for the EEPROM to finish erasing
        while (*(unsigned char *)EEPROM_CTRL_REG & EEPROM_BUSY);
    } else {
        // Print an error message if the address is out of range
        printf("Error: Address out of range\n");
    }
}

// Function to print the contents of the EEPROM
void printEEPROM() {
    // Iterate over the EEPROM range
    for (unsigned int i = EEPROM_BASE; i < EEPROM_BASE + EEPROM_SIZE; i++) {
        // Read the data at the current address
        unsigned char data = readEEPROM(i);
        // Print the address and data
        printf("Address: 0x%04X, Data: 0x%02X\n", i, data);
    }
}

// Main function to test the EEPROM driver
int main() {
    // Write data to the EEPROM
    writeEEPROM(EEPROM_BASE, 0xAA);
    writeEEPROM(EEPROM_BASE + 1, 0xBB);
    writeEEPROM(EEPROM_BASE + 2, 0xCC);
    // Print the contents of the EEPROM
    printEEPROM();
    // Erase data from the EEPROM
    eraseEEPROM(EEPROM_BASE + 1);
    // Print the contents of the EEPROM
    printEEPROM();
    // Return 0 to indicate successful execution
    return 0;
}